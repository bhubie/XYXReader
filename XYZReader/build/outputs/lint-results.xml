<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.View#setOnApplyWindowInsetsListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mUpButtonContainer.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() {"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\ArticleDetailActivity.java"
            line="90"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 20 (current min is 16): `android.view.View.OnApplyWindowInsetsListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mUpButtonContainer.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() {"
        errorLine2="                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\ArticleDetailActivity.java"
            line="90"
            column="72"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.View#onApplyWindowInsets`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    view.onApplyWindowInsets(windowInsets);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\ArticleDetailActivity.java"
            line="93"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.WindowInsets#getSystemWindowInsetTop`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mTopInset = windowInsets.getSystemWindowInsetTop();"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\ArticleDetailActivity.java"
            line="94"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.view.View#setBackgroundTintList`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                mRootView.findViewById(R.id.share_fab).setBackgroundTintList(ColorStateList.valueOf(mMutedColor));"
        errorLine2="                                                                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\ArticleDetailFragment.java"
            line="187"
            column="72"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.widget.FrameLayout#requestApplyInsets`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            requestApplyInsets();"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\DrawInsetsFrameLayout.java"
            line="84"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.WindowInsets#getSystemWindowInsetLeft`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                insets.getSystemWindowInsetLeft(),"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\DrawInsetsFrameLayout.java"
            line="107"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.WindowInsets#getSystemWindowInsetTop`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                insets.getSystemWindowInsetTop(),"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\DrawInsetsFrameLayout.java"
            line="108"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.WindowInsets#getSystemWindowInsetRight`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                insets.getSystemWindowInsetRight(),"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\DrawInsetsFrameLayout.java"
            line="109"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.WindowInsets#getSystemWindowInsetBottom`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                insets.getSystemWindowInsetBottom());"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\DrawInsetsFrameLayout.java"
            line="110"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.widget.LinearLayout`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(context, attrs, defStyleAttr, defStyleRes);"
        errorLine2="        ~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\java\com\example\xyzreader\ui\MaxWidthLinearLayout.java"
            line="50"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:statusBarColor` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:statusBarColor&quot;>@color/theme_primary_dark&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\styles.xml"
            line="21"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:statusBarColor` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:statusBarColor&quot;>@android:color/transparent&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\styles.xml"
            line="25"
            column="15"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 22"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\build.gradle"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:support-v4 than 22.0.0 is available: 23.1.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:support-v4:22.0.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\build.gradle"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:appcompat-v7 than 22.0.0 is available: 23.1.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:appcompat-v7:22.0.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\build.gradle"
            line="28"
            column="5"/>
    </issue>

    <issue
        id="MergeRootFrame"
        severity="Warning"
        message="This `&lt;FrameLayout>` can be replaced with a `&lt;merge>` tag"
        category="Performance"
        priority="4"
        summary="FrameLayout can be replaced with `&lt;merge>` tag"
        explanation="If a `&lt;FrameLayout>` is the root of a layout and does not provide background or padding etc, it can often be replaced with a `&lt;merge>` tag which is slightly more efficient. Note that this depends on context, so make sure you understand how the `&lt;merge>` tag works before proceeding."
        url="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html"
        urls="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html"
        errorLine1="&lt;FrameLayout"
        errorLine2="^">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\layout\activity_article_detail.xml"
            line="1"
            column="1"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.add_fab_background` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\drawable\add_fab_background.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.theme_primary_light` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&apos;theme_primary_light&apos;>#CFD8DC&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\colors.xml"
            line="24"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.ltgray` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;ltgray&quot;>#ffe0e0e0&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\colors.xml"
            line="25"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.textIcons` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;textIcons&quot;>#FFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\colors.xml"
            line="28"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.detail_body_text_size` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;detail_body_text_size&quot;>22sp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\dimens.xml"
            line="4"
            column="12"/>
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values-sw600dp\dimens.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.fab_margin` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;fab_margin&quot;>24dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\dimens.xml"
            line="9"
            column="12"/>
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values-sw600dp\dimens.xml"
            line="6"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.empty_detail` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\drawable-nodpi\empty_detail.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.anim.fab_state_list_anim` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\anim-v21\fab_state_list_anim.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.detail_card_max_width` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;detail_card_max_width&quot;>10000dp&lt;/dimen> &lt;!-- force match_parent -->"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\macro_layout.xml"
            line="12"
            column="12"/>
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values-w800dp\macro_layout.xml"
            line="8"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.detail_body_top_margin` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;detail_body_top_margin&quot;>16dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\macro_layout.xml"
            line="15"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.menu.main` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\menu\main.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.padded_divider` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\drawable\padded_divider.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.photo_background_protection` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\drawable\photo_background_protection.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.welcome_xyz_reader` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;welcome_xyz_reader&quot;>Welcome to XYZ Reader!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.action_settings` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;action_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\values\strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src\main\res`: drawable-mdpi, drawable-hdpi, drawable-xhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="                    &lt;ImageView"
        errorLine2="                    ^"
        quickfix="studio,adt">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\layout\fragment_article_detail.xml"
            line="30"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_gravity=&quot;bottom|right&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\bhuber\Desktop\AndroidProjects\xyzreader\XYZReader\src\main\res\layout\fragment_article_detail.xml"
            line="122"
            column="9"/>
    </issue>

</issues>
